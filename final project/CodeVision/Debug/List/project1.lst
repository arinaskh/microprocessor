
AVRASM ver. 2.1.30  C:\Users\parva\Desktop\codevision\Debug\List\project1.asm Mon Dec 27 23:41:51 2021

C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1414): warning: Register r4 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1415): warning: Register r5 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1416): warning: Register r6 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1417): warning: Register r7 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1418): warning: Register r8 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1419): warning: Register r9 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1420): warning: Register r11 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1421): warning: Register r10 already defined by the .DEF directive
C:\Users\parva\Desktop\codevision\Debug\List\project1.asm(1422): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.46a 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R4
                 	.DEF _a_msb=R5
                 	.DEF _b=R6
                 	.DEF _b_msb=R7
                 	.DEF _c=R8
                 	.DEF _c_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 2520
000034 3230
000035 0064
000036 6554      	.DB  0x20,0x25,0x30,0x32,0x64,0x0,0x54,0x65
000037 706d
000038 253d
000039 0064
00003a 6170      	.DB  0x6D,0x70,0x3D,0x25,0x64,0x0,0x70,0x61
00003b 7672
00003c 2061
00003d 6c61
00003e 6169      	.DB  0x72,0x76,0x61,0x20,0x61,0x6C,0x69,0x61
00003f 6564
000040 3100
000041 3130
000042 3639      	.DB  0x64,0x65,0x0,0x31,0x30,0x31,0x39,0x36
000043 3230
000044 3231
000045 3335
000046 0039      	.DB  0x30,0x32,0x31,0x32,0x35,0x33,0x39,0x0
000047 7270
000048 6a6f
000049 6365
00004a 0074      	.DB  0x70,0x72,0x6F,0x6A,0x65,0x63,0x74,0x0
00004b 7270
00004c 7365
00004d 5f73
00004e 656b      	.DB  0x70,0x72,0x65,0x73,0x73,0x5F,0x6B,0x65
00004f 0079
000050 656b
000051 2079
000052 7369      	.DB  0x79,0x0,0x6B,0x65,0x79,0x20,0x69,0x73
000053 253d
000054 0064      	.DB  0x3D,0x25,0x64,0x0
                 _0x2020003:
000055 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000056 0002      	.DW  0x02
000057 026f      	.DW  __base_y_G101
000058 00aa      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000059 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005a 94f8      	CLI
00005b 27ee      	CLR  R30
00005c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005d e0f1      	LDI  R31,1
00005e bffb      	OUT  GICR,R31
00005f bfeb      	OUT  GICR,R30
000060 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000061 e08d      	LDI  R24,(14-2)+1
000062 e0a2      	LDI  R26,2
000063 27bb      	CLR  R27
                 __CLEAR_REG:
000064 93ed      	ST   X+,R30
000065 958a      	DEC  R24
000066 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000067 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000068 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000069 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006a 93ed      	ST   X+,R30
00006b 9701      	SBIW R24,1
00006c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006d eaec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006f 9185      	LPM  R24,Z+
000070 9195      	LPM  R25,Z+
000071 9700      	SBIW R24,0
000072 f061      	BREQ __GLOBAL_INI_END
000073 91a5      	LPM  R26,Z+
000074 91b5      	LPM  R27,Z+
000075 9005      	LPM  R0,Z+
000076 9015      	LPM  R1,Z+
000077 01bf      	MOVW R22,R30
000078 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000079 9005      	LPM  R0,Z+
00007a 920d      	ST   X+,R0
00007b 9701      	SBIW R24,1
00007c f7e1      	BRNE __GLOBAL_INI_LOOP
00007d 01fb      	MOVW R30,R22
00007e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000080 bfed      	OUT  SPL,R30
000081 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000082 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000083 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000084 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000085 940c 00fc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0029 ADMUX=adc_input | ADC_VREF_TYPE;
000087 931a      	ST   -Y,R17
000088 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
000089 2fe1      	MOV  R30,R17
00008a 6ce0      	ORI  R30,LOW(0xC0)
00008b b9e7      	OUT  0x7,R30
                 ; 0000 002A // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 002B delay_us(10);
                +
00008c e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00008d 958a     +DEC R24
00008e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 002C // Start the AD conversion
                 ; 0000 002D ADCSRA|=(1<<ADSC);
00008f 9a36      	SBI  0x6,6
                 ; 0000 002E // Wait for the AD conversion to complete
                 ; 0000 002F while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000090 9b34      	SBIS 0x6,4
000091 cffe      	RJMP _0x3
                 ; 0000 0030 ADCSRA|=(1<<ADIF);
000092 9a34      	SBI  0x6,4
                 ; 0000 0031 return ADCW;
000093 b1e4      	IN   R30,0x4
000094 b1f5      	IN   R31,0x4+1
000095 940c 0384 	JMP  _0x2080001
                 ; 0000 0032 }
                 ; .FEND
                 ;int get_key (void){
                 ; 0000 0038 int get_key (void){
                 _get_key:
                 ; .FSTART _get_key
                 ; 0000 0039 DDRB = 0b00000000;
000097 e0e0      	LDI  R30,LOW(0)
000098 bbe7      	OUT  0x17,R30
                 ; 0000 003A PORTB = 0b00001111;
000099 e0ef      	LDI  R30,LOW(15)
00009a bbe8      	OUT  0x18,R30
                 ; 0000 003B 
                 ; 0000 003C DDRB = 0b00010000;
00009b e1e0      	LDI  R30,LOW(16)
00009c bbe7      	OUT  0x17,R30
                 ; 0000 003D if(PINB.0==0) return sprintf(s," %02d",7);
00009d 99b0      	SBIC 0x16,0
00009e c006      	RJMP _0x6
00009f d2ff      	RCALL SUBOPT_0x0
                +
0000a0 e0e7     +LDI R30 , LOW ( 0x7 )
0000a1 e0f0     +LDI R31 , HIGH ( 0x7 )
0000a2 e060     +LDI R22 , BYTE3 ( 0x7 )
0000a3 e070     +LDI R23 , BYTE4 ( 0x7 )
                 	__GETD1N 0x7
0000a4 c03e      	RJMP _0x2080004
                 ; 0000 003E if(PINB.1==0) return sprintf(s," %02d",4);
                 _0x6:
0000a5 99b1      	SBIC 0x16,1
0000a6 c006      	RJMP _0x7
0000a7 d2f7      	RCALL SUBOPT_0x0
                +
0000a8 e0e4     +LDI R30 , LOW ( 0x4 )
0000a9 e0f0     +LDI R31 , HIGH ( 0x4 )
0000aa e060     +LDI R22 , BYTE3 ( 0x4 )
0000ab e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
0000ac c036      	RJMP _0x2080004
                 ; 0000 003F if(PINB.2==0) return sprintf(s,"Temp=%d",(read_adc(0))/4);
                 _0x7:
0000ad 99b2      	SBIC 0x16,2
0000ae c003      	RJMP _0x8
0000af d2f8      	RCALL SUBOPT_0x1
0000b0 e0a0      	LDI  R26,LOW(0)
0000b1 c02d      	RJMP _0x2080005
                 ; 0000 0040 
                 ; 0000 0041 DDRB = 0b00100000;
                 _0x8:
0000b2 e2e0      	LDI  R30,LOW(32)
0000b3 bbe7      	OUT  0x17,R30
                 ; 0000 0042 if(PINB.0==0) return sprintf(s," %02d",8);
0000b4 99b0      	SBIC 0x16,0
0000b5 c006      	RJMP _0x9
0000b6 d2e8      	RCALL SUBOPT_0x0
                +
0000b7 e0e8     +LDI R30 , LOW ( 0x8 )
0000b8 e0f0     +LDI R31 , HIGH ( 0x8 )
0000b9 e060     +LDI R22 , BYTE3 ( 0x8 )
0000ba e070     +LDI R23 , BYTE4 ( 0x8 )
                 	__GETD1N 0x8
0000bb c027      	RJMP _0x2080004
                 ; 0000 0043 if(PINB.1==0) return sprintf(s," %02d",5);
                 _0x9:
0000bc 99b1      	SBIC 0x16,1
0000bd c006      	RJMP _0xA
0000be d2e0      	RCALL SUBOPT_0x0
                +
0000bf e0e5     +LDI R30 , LOW ( 0x5 )
0000c0 e0f0     +LDI R31 , HIGH ( 0x5 )
0000c1 e060     +LDI R22 , BYTE3 ( 0x5 )
0000c2 e070     +LDI R23 , BYTE4 ( 0x5 )
                 	__GETD1N 0x5
0000c3 c01f      	RJMP _0x2080004
                 ; 0000 0044 if(PINB.2==0) return sprintf(s,"Temp=%d",(read_adc(1))/4);
                 _0xA:
0000c4 99b2      	SBIC 0x16,2
0000c5 c003      	RJMP _0xB
0000c6 d2e1      	RCALL SUBOPT_0x1
0000c7 e0a1      	LDI  R26,LOW(1)
0000c8 c016      	RJMP _0x2080005
                 ; 0000 0045 
                 ; 0000 0046 DDRB = 0b01000000;
                 _0xB:
0000c9 e4e0      	LDI  R30,LOW(64)
0000ca bbe7      	OUT  0x17,R30
                 ; 0000 0047 if(PINB.0==0) return sprintf(s," %02d",9);
0000cb 99b0      	SBIC 0x16,0
0000cc c006      	RJMP _0xC
0000cd d2d1      	RCALL SUBOPT_0x0
                +
0000ce e0e9     +LDI R30 , LOW ( 0x9 )
0000cf e0f0     +LDI R31 , HIGH ( 0x9 )
0000d0 e060     +LDI R22 , BYTE3 ( 0x9 )
0000d1 e070     +LDI R23 , BYTE4 ( 0x9 )
                 	__GETD1N 0x9
0000d2 c010      	RJMP _0x2080004
                 ; 0000 0048 if(PINB.1==0) return sprintf(s," %02d",6);
                 _0xC:
0000d3 99b1      	SBIC 0x16,1
0000d4 c006      	RJMP _0xD
0000d5 d2c9      	RCALL SUBOPT_0x0
                +
0000d6 e0e6     +LDI R30 , LOW ( 0x6 )
0000d7 e0f0     +LDI R31 , HIGH ( 0x6 )
0000d8 e060     +LDI R22 , BYTE3 ( 0x6 )
0000d9 e070     +LDI R23 , BYTE4 ( 0x6 )
                 	__GETD1N 0x6
0000da c008      	RJMP _0x2080004
                 ; 0000 0049 if(PINB.2==0) return sprintf(s,"Temp=%d",(read_adc(2))/4);
                 _0xD:
0000db 99b2      	SBIC 0x16,2
0000dc c00b      	RJMP _0xE
0000dd d2ca      	RCALL SUBOPT_0x1
0000de e0a2      	LDI  R26,LOW(2)
                 _0x2080005:
0000df dfa7      	RCALL _read_adc
0000e0 d31e      	RCALL __LSRW2
0000e1 2766      	CLR  R22
0000e2 2777      	CLR  R23
                 _0x2080004:
0000e3 d324      	RCALL __PUTPARD1
0000e4 e084      	LDI  R24,4
0000e5 d1d1      	RCALL _sprintf
0000e6 9628      	ADIW R28,8
0000e7 9508      	RET
                 ; 0000 004A 
                 ; 0000 004B DDRB = 0b10000000;
                 _0xE:
0000e8 e8e0      	LDI  R30,LOW(128)
0000e9 bbe7      	OUT  0x17,R30
                 ; 0000 004C if(PINB.0==0) return 10;
0000ea 99b0      	SBIC 0x16,0
0000eb c003      	RJMP _0xF
0000ec e0ea      	LDI  R30,LOW(10)
0000ed e0f0      	LDI  R31,HIGH(10)
0000ee 9508      	RET
                 ; 0000 004D if(PINB.1==0) return 11;
                 _0xF:
0000ef 99b1      	SBIC 0x16,1
0000f0 c003      	RJMP _0x10
0000f1 e0eb      	LDI  R30,LOW(11)
0000f2 e0f0      	LDI  R31,HIGH(11)
0000f3 9508      	RET
                 ; 0000 004E if(PINB.2==0) return 12;
                 _0x10:
0000f4 99b2      	SBIC 0x16,2
0000f5 c003      	RJMP _0x11
0000f6 e0ec      	LDI  R30,LOW(12)
0000f7 e0f0      	LDI  R31,HIGH(12)
0000f8 9508      	RET
                 ; 0000 004F 
                 ; 0000 0050 return 255;
                 _0x11:
0000f9 efef      	LDI  R30,LOW(255)
0000fa e0f0      	LDI  R31,HIGH(255)
0000fb 9508      	RET
                 ; 0000 0051 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 0055 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0056 int key;
                 ; 0000 0057 char buffer[15];
                 ; 0000 0058 // Declare your local variables here
                 ; 0000 0059 
                 ; 0000 005A // Input/Output Ports initialization
                 ; 0000 005B // Port A initialization
                 ; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000fc 972f      	SBIW R28,15
                 ;	key -> R16,R17
                 ;	buffer -> Y+0
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bbea      	OUT  0x1A,R30
                 ; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ff bbeb      	OUT  0x1B,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port B initialization
                 ; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0063 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000100 bbe7      	OUT  0x17,R30
                 ; 0000 0064 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0065 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000101 bbe8      	OUT  0x18,R30
                 ; 0000 0066 
                 ; 0000 0067 // Port C initialization
                 ; 0000 0068 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0069 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000102 bbe4      	OUT  0x14,R30
                 ; 0000 006A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000103 bbe5      	OUT  0x15,R30
                 ; 0000 006C 
                 ; 0000 006D // Port D initialization
                 ; 0000 006E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000104 bbe1      	OUT  0x11,R30
                 ; 0000 0070 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0071 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000105 bbe2      	OUT  0x12,R30
                 ; 0000 0072 
                 ; 0000 0073 // Timer/Counter 0 initialization
                 ; 0000 0074 // Clock source: System Clock
                 ; 0000 0075 // Clock value: Timer 0 Stopped
                 ; 0000 0076 // Mode: Normal top=0xFF
                 ; 0000 0077 // OC0 output: Disconnected
                 ; 0000 0078 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000106 bfe3      	OUT  0x33,R30
                 ; 0000 0079 TCNT0=0x00;
000107 bfe2      	OUT  0x32,R30
                 ; 0000 007A OCR0=0x00;
000108 bfec      	OUT  0x3C,R30
                 ; 0000 007B 
                 ; 0000 007C // Timer/Counter 1 initialization
                 ; 0000 007D // Clock source: System Clock
                 ; 0000 007E // Clock value: Timer1 Stopped
                 ; 0000 007F // Mode: Normal top=0xFFFF
                 ; 0000 0080 // OC1A output: Disconnected
                 ; 0000 0081 // OC1B output: Disconnected
                 ; 0000 0082 // Noise Canceler: Off
                 ; 0000 0083 // Input Capture on Falling Edge
                 ; 0000 0084 // Timer1 Overflow Interrupt: Off
                 ; 0000 0085 // Input Capture Interrupt: Off
                 ; 0000 0086 // Compare A Match Interrupt: Off
                 ; 0000 0087 // Compare B Match Interrupt: Off
                 ; 0000 0088 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000109 bdef      	OUT  0x2F,R30
                 ; 0000 0089 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00010a bdee      	OUT  0x2E,R30
                 ; 0000 008A TCNT1H=0x00;
00010b bded      	OUT  0x2D,R30
                 ; 0000 008B TCNT1L=0x00;
00010c bdec      	OUT  0x2C,R30
                 ; 0000 008C ICR1H=0x00;
00010d bde7      	OUT  0x27,R30
                 ; 0000 008D ICR1L=0x00;
00010e bde6      	OUT  0x26,R30
                 ; 0000 008E OCR1AH=0x00;
00010f bdeb      	OUT  0x2B,R30
                 ; 0000 008F OCR1AL=0x00;
000110 bdea      	OUT  0x2A,R30
                 ; 0000 0090 OCR1BH=0x00;
000111 bde9      	OUT  0x29,R30
                 ; 0000 0091 OCR1BL=0x00;
000112 bde8      	OUT  0x28,R30
                 ; 0000 0092 
                 ; 0000 0093 // Timer/Counter 2 initialization
                 ; 0000 0094 // Clock source: System Clock
                 ; 0000 0095 // Clock value: Timer2 Stopped
                 ; 0000 0096 // Mode: Normal top=0xFF
                 ; 0000 0097 // OC2 output: Disconnected
                 ; 0000 0098 ASSR=0<<AS2;
000113 bde2      	OUT  0x22,R30
                 ; 0000 0099 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000114 bde5      	OUT  0x25,R30
                 ; 0000 009A TCNT2=0x00;
000115 bde4      	OUT  0x24,R30
                 ; 0000 009B OCR2=0x00;
000116 bde3      	OUT  0x23,R30
                 ; 0000 009C 
                 ; 0000 009D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 009E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000117 bfe9      	OUT  0x39,R30
                 ; 0000 009F 
                 ; 0000 00A0 // External Interrupt(s) initialization
                 ; 0000 00A1 // INT0: Off
                 ; 0000 00A2 // INT1: Off
                 ; 0000 00A3 // INT2: Off
                 ; 0000 00A4 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000118 bfe5      	OUT  0x35,R30
                 ; 0000 00A5 MCUCSR=(0<<ISC2);
000119 bfe4      	OUT  0x34,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // USART initialization
                 ; 0000 00A8 // USART disabled
                 ; 0000 00A9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00011a b9ea      	OUT  0xA,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Analog Comparator initialization
                 ; 0000 00AC // Analog Comparator: Off
                 ; 0000 00AD // The Analog Comparator's positive input is
                 ; 0000 00AE // connected to the AIN0 pin
                 ; 0000 00AF // The Analog Comparator's negative input is
                 ; 0000 00B0 // connected to the AIN1 pin
                 ; 0000 00B1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00011b e8e0      	LDI  R30,LOW(128)
00011c b9e8      	OUT  0x8,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // ADC initialization
                 ; 0000 00B4 // ADC Clock frequency: 125.000 kHz
                 ; 0000 00B5 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 00B6 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00B7 ADMUX=ADC_VREF_TYPE;
00011d ece0      	LDI  R30,LOW(192)
00011e b9e7      	OUT  0x7,R30
                 ; 0000 00B8 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00011f e8e3      	LDI  R30,LOW(131)
000120 b9e6      	OUT  0x6,R30
                 ; 0000 00B9 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000121 e0e0      	LDI  R30,LOW(0)
000122 bfe0      	OUT  0x30,R30
                 ; 0000 00BA 
                 ; 0000 00BB // SPI initialization
                 ; 0000 00BC // SPI disabled
                 ; 0000 00BD SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000123 b9ed      	OUT  0xD,R30
                 ; 0000 00BE 
                 ; 0000 00BF // TWI initialization
                 ; 0000 00C0 // TWI disabled
                 ; 0000 00C1 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000124 bfe6      	OUT  0x36,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Alphanumeric LCD initialization
                 ; 0000 00C4 // Connections are specified in the
                 ; 0000 00C5 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00C6 // RS: PORTC Bit 0
                 ; 0000 00C7 // RD: PORTC Bit 1
                 ; 0000 00C8 // EN: PORTC Bit 2
                 ; 0000 00C9 // D4: PORTC Bit 4
                 ; 0000 00CA // D5: PORTC Bit 5
                 ; 0000 00CB // D6: PORTC Bit 6
                 ; 0000 00CC // D7: PORTC Bit 7
                 ; 0000 00CD // Characters/line: 16
                 ; 0000 00CE lcd_init(16);
000125 e1a0      	LDI  R26,LOW(16)
000126 d235      	RCALL _lcd_init
                 ; 0000 00CF lcd_clear();
000127 d289      	RCALL SUBOPT_0x2
                 ; 0000 00D0 lcd_gotoxy(0,0);
                 ; 0000 00D1 lcd_putsf("parva aliade");
                +
000128 e7a4     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
000129 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
00012a d28b      	RCALL SUBOPT_0x3
                 ; 0000 00D2 lcd_gotoxy(0,1);
                 ; 0000 00D3 lcd_putsf("101960212539");
                +
00012b e8a1     +LDI R26 , LOW ( 2 * _0x0 + ( 27 ) )
00012c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 27 ) )
                 	__POINTW2FN _0x0,27
00012d d21f      	RCALL _lcd_putsf
                 ; 0000 00D4 delay_ms(1000);
00012e eea8      	LDI  R26,LOW(1000)
00012f e0b3      	LDI  R27,HIGH(1000)
000130 d2dc      	RCALL _delay_ms
                 ; 0000 00D5 lcd_clear();
000131 d1f0      	RCALL _lcd_clear
                 ; 0000 00D6 
                 ; 0000 00D7 
                 ; 0000 00D8 while (1)
                 _0x12:
                 ; 0000 00D9 {
                 ; 0000 00DA // Place your code here
                 ; 0000 00DB {
                 ; 0000 00DC a=read_adc(0);
000132 e0a0      	LDI  R26,LOW(0)
000133 df53      	RCALL _read_adc
000134 012f      	MOVW R4,R30
                 ; 0000 00DD b=read_adc(1);
000135 e0a1      	LDI  R26,LOW(1)
000136 df50      	RCALL _read_adc
000137 013f      	MOVW R6,R30
                 ; 0000 00DE c=read_adc(2);
000138 e0a2      	LDI  R26,LOW(2)
000139 df4d      	RCALL _read_adc
00013a 014f      	MOVW R8,R30
                 ; 0000 00DF 
                 ; 0000 00E0 lcd_gotoxy(0,0);
00013b e0e0      	LDI  R30,LOW(0)
00013c 93ea      	ST   -Y,R30
00013d e0a0      	LDI  R26,LOW(0)
00013e d1d1      	RCALL _lcd_gotoxy
                 ; 0000 00E1 lcd_putsf("project");
                +
00013f e8ae     +LDI R26 , LOW ( 2 * _0x0 + ( 40 ) )
000140 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 40 ) )
                 	__POINTW2FN _0x0,40
000141 d274      	RCALL SUBOPT_0x3
                 ; 0000 00E2 lcd_gotoxy(0,1);
                 ; 0000 00E3 lcd_putsf("press_key");
                +
000142 e9a6     +LDI R26 , LOW ( 2 * _0x0 + ( 48 ) )
000143 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW2FN _0x0,48
000144 d208      	RCALL _lcd_putsf
                 ; 0000 00E4 key = get_key();
000145 df51      	RCALL _get_key
000146 018f      	MOVW R16,R30
                 ; 0000 00E5 if(key<255){
                +
000147 3f0f     +CPI R16 , LOW ( 255 )
000148 e0e0     +LDI R30 , HIGH ( 255 )
000149 071e     +CPC R17 , R30
                 	__CPWRN 16,17,255
00014a f4bc      	BRGE _0x15
                 ; 0000 00E6 sprintf(buffer,"key is=%d",key);
00014b 01fe      	MOVW R30,R28
00014c 93fa      	ST   -Y,R31
00014d 93ea      	ST   -Y,R30
                +
00014e eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 58 ) )
00014f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW1FN _0x0,58
000150 93fa      	ST   -Y,R31
000151 93ea      	ST   -Y,R30
000152 01f8      	MOVW R30,R16
                +
000153 2f6f     +MOV R22 , R31
000154 0f66     +ADD R22 , R22
000155 0b66     +SBC R22 , R22
000156 2f76     +MOV R23 , R22
                 	__CWD1
000157 d2b0      	RCALL __PUTPARD1
000158 e084      	LDI  R24,4
000159 d15d      	RCALL _sprintf
00015a 9628      	ADIW R28,8
                 ; 0000 00E7 lcd_clear();
00015b d255      	RCALL SUBOPT_0x2
                 ; 0000 00E8 lcd_gotoxy(0,0);
                 ; 0000 00E9 lcd_puts(s);
00015c e6a0      	LDI  R26,LOW(_s)
00015d e0b2      	LDI  R27,HIGH(_s)
00015e d1e1      	RCALL _lcd_puts
                 ; 0000 00EA delay_ms(500);
00015f efa4      	LDI  R26,LOW(500)
000160 e0b1      	LDI  R27,HIGH(500)
000161 d2ab      	RCALL _delay_ms
                 ; 0000 00EB }
                 ; 0000 00EC }
                 _0x15:
                 ; 0000 00ED }
000162 cfcf      	RJMP _0x12
                 ; 0000 00EE }
                 _0x16:
000163 cfff      	RJMP _0x16
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000164 d288      	RCALL __SAVELOCR6
000165 019d      	MOVW R18,R26
000166 815e      	LDD  R21,Y+6
000167 9612      	ADIW R26,2
                +
000168 91ed     +LD R30 , X +
000169 91fc     +LD R31 , X
00016a 9711     +SBIW R26 , 1
                 	__GETW1P
00016b 9730      	SBIW R30,0
00016c f0e9      	BREQ _0x2000010
00016d 01d9      	MOVW R26,R18
00016e d24c      	RCALL SUBOPT_0x4
00016f 018f      	MOVW R16,R30
000170 9730      	SBIW R30,0
000171 f059      	BREQ _0x2000012
                +
000172 3002     +CPI R16 , LOW ( 2 )
000173 e0e0     +LDI R30 , HIGH ( 2 )
000174 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000175 f060      	BRLO _0x2000013
000176 01f8      	MOVW R30,R16
000177 9731      	SBIW R30,1
000178 018f      	MOVW R16,R30
                +
000179 01d9     +MOVW R26 , R18
00017a 9614     +ADIW R26 , 4
00017b 93ed     +ST X + , R30
00017c 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
00017d 01d9      	MOVW R26,R18
00017e 9612      	ADIW R26,2
00017f d240      	RCALL SUBOPT_0x5
000180 9731      	SBIW R30,1
000181 8350      	ST   Z,R21
                 _0x2000013:
000182 01d9      	MOVW R26,R18
                +
000183 91ed     +LD R30 , X +
000184 91fc     +LD R31 , X
000185 9711     +SBIW R26 , 1
                 	__GETW1P
000186 23ff      	TST  R31
000187 f00a      	BRMI _0x2000014
000188 d237      	RCALL SUBOPT_0x5
                 _0x2000014:
000189 c005      	RJMP _0x2000015
                 _0x2000010:
00018a 01d9      	MOVW R26,R18
00018b efef      	LDI  R30,LOW(65535)
00018c efff      	LDI  R31,HIGH(65535)
00018d 93ed      	ST   X+,R30
00018e 93fc      	ST   X,R31
                 _0x2000015:
00018f d264      	RCALL __LOADLOCR6
000190 9627      	ADIW R28,7
000191 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000192 93ba      	ST   -Y,R27
000193 93aa      	ST   -Y,R26
000194 9726      	SBIW R28,6
000195 d257      	RCALL __SAVELOCR6
000196 e010      	LDI  R17,0
000197 85ac      	LDD  R26,Y+12
000198 85bd      	LDD  R27,Y+12+1
000199 e0e0      	LDI  R30,LOW(0)
00019a e0f0      	LDI  R31,HIGH(0)
00019b 93ed      	ST   X+,R30
00019c 93fc      	ST   X,R31
                 _0x2000016:
00019d 89ea      	LDD  R30,Y+18
00019e 89fb      	LDD  R31,Y+18+1
00019f 9631      	ADIW R30,1
0001a0 8bea      	STD  Y+18,R30
0001a1 8bfb      	STD  Y+18+1,R31
0001a2 9731      	SBIW R30,1
0001a3 91e4      	LPM  R30,Z
0001a4 2f2e      	MOV  R18,R30
0001a5 30e0      	CPI  R30,0
0001a6 f409      	BRNE PC+2
0001a7 c108      	RJMP _0x2000018
0001a8 2fe1      	MOV  R30,R17
0001a9 30e0      	CPI  R30,0
0001aa f431      	BRNE _0x200001C
0001ab 3225      	CPI  R18,37
0001ac f411      	BRNE _0x200001D
0001ad e011      	LDI  R17,LOW(1)
0001ae c001      	RJMP _0x200001E
                 _0x200001D:
0001af d216      	RCALL SUBOPT_0x6
                 _0x200001E:
0001b0 c0fe      	RJMP _0x200001B
                 _0x200001C:
0001b1 30e1      	CPI  R30,LOW(0x1)
0001b2 f4a1      	BRNE _0x200001F
0001b3 3225      	CPI  R18,37
0001b4 f411      	BRNE _0x2000020
0001b5 d210      	RCALL SUBOPT_0x6
0001b6 c0f7      	RJMP _0x20000CC
                 _0x2000020:
0001b7 e012      	LDI  R17,LOW(2)
0001b8 e040      	LDI  R20,LOW(0)
0001b9 e000      	LDI  R16,LOW(0)
0001ba 322d      	CPI  R18,45
0001bb f411      	BRNE _0x2000021
0001bc e001      	LDI  R16,LOW(1)
0001bd c0f1      	RJMP _0x200001B
                 _0x2000021:
0001be 322b      	CPI  R18,43
0001bf f411      	BRNE _0x2000022
0001c0 e24b      	LDI  R20,LOW(43)
0001c1 c0ed      	RJMP _0x200001B
                 _0x2000022:
0001c2 3220      	CPI  R18,32
0001c3 f411      	BRNE _0x2000023
0001c4 e240      	LDI  R20,LOW(32)
0001c5 c0e9      	RJMP _0x200001B
                 _0x2000023:
0001c6 c002      	RJMP _0x2000024
                 _0x200001F:
0001c7 30e2      	CPI  R30,LOW(0x2)
0001c8 f439      	BRNE _0x2000025
                 _0x2000024:
0001c9 e050      	LDI  R21,LOW(0)
0001ca e013      	LDI  R17,LOW(3)
0001cb 3320      	CPI  R18,48
0001cc f411      	BRNE _0x2000026
0001cd 6800      	ORI  R16,LOW(128)
0001ce c0e0      	RJMP _0x200001B
                 _0x2000026:
0001cf c003      	RJMP _0x2000027
                 _0x2000025:
0001d0 30e3      	CPI  R30,LOW(0x3)
0001d1 f009      	BREQ PC+2
0001d2 c0dc      	RJMP _0x200001B
                 _0x2000027:
0001d3 3320      	CPI  R18,48
0001d4 f010      	BRLO _0x200002A
0001d5 332a      	CPI  R18,58
0001d6 f008      	BRLO _0x200002B
                 _0x200002A:
0001d7 c007      	RJMP _0x2000029
                 _0x200002B:
0001d8 e0aa      	LDI  R26,LOW(10)
0001d9 9f5a      	MUL  R21,R26
0001da 2d50      	MOV  R21,R0
0001db 2fe2      	MOV  R30,R18
0001dc 53e0      	SUBI R30,LOW(48)
0001dd 0f5e      	ADD  R21,R30
0001de c0d0      	RJMP _0x200001B
                 _0x2000029:
0001df 2fe2      	MOV  R30,R18
0001e0 36e3      	CPI  R30,LOW(0x63)
0001e1 f439      	BRNE _0x200002F
0001e2 d1ea      	RCALL SUBOPT_0x7
0001e3 89e8      	LDD  R30,Y+16
0001e4 89f9      	LDD  R31,Y+16+1
0001e5 81a4      	LDD  R26,Z+4
0001e6 93aa      	ST   -Y,R26
0001e7 d1eb      	RCALL SUBOPT_0x8
0001e8 c0c5      	RJMP _0x2000030
                 _0x200002F:
0001e9 37e3      	CPI  R30,LOW(0x73)
0001ea f429      	BRNE _0x2000032
0001eb d1e1      	RCALL SUBOPT_0x7
0001ec d1ec      	RCALL SUBOPT_0x9
0001ed d198      	RCALL _strlen
0001ee 2f1e      	MOV  R17,R30
0001ef c007      	RJMP _0x2000033
                 _0x2000032:
0001f0 37e0      	CPI  R30,LOW(0x70)
0001f1 f449      	BRNE _0x2000035
0001f2 d1da      	RCALL SUBOPT_0x7
0001f3 d1e5      	RCALL SUBOPT_0x9
0001f4 d19d      	RCALL _strlenf
0001f5 2f1e      	MOV  R17,R30
0001f6 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001f7 6002      	ORI  R16,LOW(2)
0001f8 770f      	ANDI R16,LOW(127)
0001f9 e030      	LDI  R19,LOW(0)
0001fa c037      	RJMP _0x2000036
                 _0x2000035:
0001fb 36e4      	CPI  R30,LOW(0x64)
0001fc f011      	BREQ _0x2000039
0001fd 36e9      	CPI  R30,LOW(0x69)
0001fe f411      	BRNE _0x200003A
                 _0x2000039:
0001ff 6004      	ORI  R16,LOW(4)
000200 c002      	RJMP _0x200003B
                 _0x200003A:
000201 37e5      	CPI  R30,LOW(0x75)
000202 f431      	BRNE _0x200003C
                 _0x200003B:
000203 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000204 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000205 83ee      	STD  Y+6,R30
000206 83ff      	STD  Y+6+1,R31
000207 e015      	LDI  R17,LOW(5)
000208 c00c      	RJMP _0x200003D
                 _0x200003C:
000209 35e8      	CPI  R30,LOW(0x58)
00020a f411      	BRNE _0x200003F
00020b 6008      	ORI  R16,LOW(8)
00020c c003      	RJMP _0x2000040
                 _0x200003F:
00020d 37e8      	CPI  R30,LOW(0x78)
00020e f009      	BREQ PC+2
00020f c09e      	RJMP _0x2000071
                 _0x2000040:
000210 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000211 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000212 83ee      	STD  Y+6,R30
000213 83ff      	STD  Y+6+1,R31
000214 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000215 ff02      	SBRS R16,2
000216 c015      	RJMP _0x2000042
000217 d1b5      	RCALL SUBOPT_0x7
000218 89a8      	LDD  R26,Y+16
000219 89b9      	LDD  R27,Y+16+1
00021a 9614      	ADIW R26,4
00021b 91ed      	LD   R30,X+
00021c 91fd      	LD   R31,X+
00021d 87ea      	STD  Y+10,R30
00021e 87fb      	STD  Y+10+1,R31
00021f 85ab      	LDD  R26,Y+11
000220 23aa      	TST  R26
000221 f422      	BRPL _0x2000043
000222 d1d8      	RCALL __ANEGW1
000223 87ea      	STD  Y+10,R30
000224 87fb      	STD  Y+10+1,R31
000225 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000226 3040      	CPI  R20,0
000227 f011      	BREQ _0x2000044
000228 5f1f      	SUBI R17,-LOW(1)
000229 c001      	RJMP _0x2000045
                 _0x2000044:
00022a 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00022b c006      	RJMP _0x2000046
                 _0x2000042:
00022c d1a0      	RCALL SUBOPT_0x7
00022d 89a8      	LDD  R26,Y+16
00022e 89b9      	LDD  R27,Y+16+1
00022f d18b      	RCALL SUBOPT_0x4
000230 87ea      	STD  Y+10,R30
000231 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000232 fd00      	SBRC R16,0
000233 c010      	RJMP _0x2000047
                 _0x2000048:
000234 1715      	CP   R17,R21
000235 f470      	BRSH _0x200004A
000236 ff07      	SBRS R16,7
000237 c008      	RJMP _0x200004B
000238 ff02      	SBRS R16,2
000239 c004      	RJMP _0x200004C
00023a 7f0b      	ANDI R16,LOW(251)
00023b 2f24      	MOV  R18,R20
00023c 5011      	SUBI R17,LOW(1)
00023d c001      	RJMP _0x200004D
                 _0x200004C:
00023e e320      	LDI  R18,LOW(48)
                 _0x200004D:
00023f c001      	RJMP _0x200004E
                 _0x200004B:
000240 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000241 d184      	RCALL SUBOPT_0x6
000242 5051      	SUBI R21,LOW(1)
000243 cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000244 2f31      	MOV  R19,R17
000245 ff01      	SBRS R16,1
000246 c016      	RJMP _0x200004F
                 _0x2000050:
000247 3030      	CPI  R19,0
000248 f099      	BREQ _0x2000052
000249 ff03      	SBRS R16,3
00024a c006      	RJMP _0x2000053
00024b 81ee      	LDD  R30,Y+6
00024c 81ff      	LDD  R31,Y+6+1
00024d 9125      	LPM  R18,Z+
00024e 83ee      	STD  Y+6,R30
00024f 83ff      	STD  Y+6+1,R31
000250 c005      	RJMP _0x2000054
                 _0x2000053:
000251 81ae      	LDD  R26,Y+6
000252 81bf      	LDD  R27,Y+6+1
000253 912d      	LD   R18,X+
000254 83ae      	STD  Y+6,R26
000255 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000256 d16f      	RCALL SUBOPT_0x6
000257 3050      	CPI  R21,0
000258 f009      	BREQ _0x2000055
000259 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00025a 5031      	SUBI R19,LOW(1)
00025b cfeb      	RJMP _0x2000050
                 _0x2000052:
00025c c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00025d e320      	LDI  R18,LOW(48)
00025e 81ee      	LDD  R30,Y+6
00025f 81ff      	LDD  R31,Y+6+1
000260 d1a3      	RCALL __GETW1PF
000261 87e8      	STD  Y+8,R30
000262 87f9      	STD  Y+8+1,R31
000263 81ee      	LDD  R30,Y+6
000264 81ff      	LDD  R31,Y+6+1
000265 9632      	ADIW R30,2
000266 83ee      	STD  Y+6,R30
000267 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000268 85e8      	LDD  R30,Y+8
000269 85f9      	LDD  R31,Y+8+1
00026a 85aa      	LDD  R26,Y+10
00026b 85bb      	LDD  R27,Y+10+1
00026c 17ae      	CP   R26,R30
00026d 07bf      	CPC  R27,R31
00026e f050      	BRLO _0x200005C
00026f 5f2f      	SUBI R18,-LOW(1)
000270 85a8      	LDD  R26,Y+8
000271 85b9      	LDD  R27,Y+8+1
000272 85ea      	LDD  R30,Y+10
000273 85fb      	LDD  R31,Y+10+1
000274 1bea      	SUB  R30,R26
000275 0bfb      	SBC  R31,R27
000276 87ea      	STD  Y+10,R30
000277 87fb      	STD  Y+10+1,R31
000278 cfef      	RJMP _0x200005A
                 _0x200005C:
000279 332a      	CPI  R18,58
00027a f028      	BRLO _0x200005D
00027b ff03      	SBRS R16,3
00027c c002      	RJMP _0x200005E
00027d 5f29      	SUBI R18,-LOW(7)
00027e c001      	RJMP _0x200005F
                 _0x200005E:
00027f 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000280 fd04      	SBRC R16,4
000281 c019      	RJMP _0x2000061
000282 3321      	CPI  R18,49
000283 f420      	BRSH _0x2000063
000284 85a8      	LDD  R26,Y+8
000285 85b9      	LDD  R27,Y+8+1
000286 9711      	SBIW R26,1
000287 f409      	BRNE _0x2000062
                 _0x2000063:
000288 c009      	RJMP _0x20000CD
                 _0x2000062:
000289 1753      	CP   R21,R19
00028a f010      	BRLO _0x2000067
00028b ff00      	SBRS R16,0
00028c c001      	RJMP _0x2000068
                 _0x2000067:
00028d c011      	RJMP _0x2000066
                 _0x2000068:
00028e e220      	LDI  R18,LOW(32)
00028f ff07      	SBRS R16,7
000290 c00a      	RJMP _0x2000069
000291 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000292 6100      	ORI  R16,LOW(16)
000293 ff02      	SBRS R16,2
000294 c006      	RJMP _0x200006A
000295 7f0b      	ANDI R16,LOW(251)
000296 934a      	ST   -Y,R20
000297 d13b      	RCALL SUBOPT_0x8
000298 3050      	CPI  R21,0
000299 f009      	BREQ _0x200006B
00029a 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00029b d12a      	RCALL SUBOPT_0x6
00029c 3050      	CPI  R21,0
00029d f009      	BREQ _0x200006C
00029e 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00029f 5031      	SUBI R19,LOW(1)
0002a0 85a8      	LDD  R26,Y+8
0002a1 85b9      	LDD  R27,Y+8+1
0002a2 9712      	SBIW R26,2
0002a3 f008      	BRLO _0x2000059
0002a4 cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002a5 ff00      	SBRS R16,0
0002a6 c007      	RJMP _0x200006D
                 _0x200006E:
0002a7 3050      	CPI  R21,0
0002a8 f029      	BREQ _0x2000070
0002a9 5051      	SUBI R21,LOW(1)
0002aa e2e0      	LDI  R30,LOW(32)
0002ab 93ea      	ST   -Y,R30
0002ac d126      	RCALL SUBOPT_0x8
0002ad cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002ae e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002af ceed      	RJMP _0x2000016
                 _0x2000018:
0002b0 85ac      	LDD  R26,Y+12
0002b1 85bd      	LDD  R27,Y+12+1
0002b2 91ed      	LD   R30,X+
0002b3 91fd      	LD   R31,X+
0002b4 d13f      	RCALL __LOADLOCR6
0002b5 9664      	ADIW R28,20
0002b6 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002b7 92ff      	PUSH R15
0002b8 2ef8      	MOV  R15,R24
0002b9 9726      	SBIW R28,6
0002ba d132      	RCALL __SAVELOCR6
0002bb 01fe      	MOVW R30,R28
                +
0002bc 2400     +CLR R0
0002bd 0def     +ADD R30 , R15
0002be 1df0     +ADC R31 , R0
                 	__ADDW1R15
                +
0002bf 8546     +LDD R20 , Z + 14
0002c0 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0002c1 2e04      	MOV  R0,R20
0002c2 2a05      	OR   R0,R21
0002c3 f419      	BRNE _0x2000072
0002c4 efef      	LDI  R30,LOW(65535)
0002c5 efff      	LDI  R31,HIGH(65535)
0002c6 c023      	RJMP _0x2080003
                 _0x2000072:
0002c7 01de      	MOVW R26,R28
0002c8 9618      	ADIW R26,8
                +
0002c9 2400     +CLR R0
0002ca 0daf     +ADD R26 , R15
0002cb 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002cc 018d      	MOVW R16,R26
                +
0002cd 8748     +STD Y + 8 , R20
0002ce 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0002cf e0e0      	LDI  R30,LOW(0)
0002d0 87ea      	STD  Y+10,R30
0002d1 87eb      	STD  Y+10+1,R30
0002d2 01de      	MOVW R26,R28
0002d3 961c      	ADIW R26,12
                +
0002d4 2400     +CLR R0
0002d5 0daf     +ADD R26 , R15
0002d6 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002d7 91ed      	LD   R30,X+
0002d8 91fd      	LD   R31,X+
0002d9 93fa      	ST   -Y,R31
0002da 93ea      	ST   -Y,R30
0002db 931a      	ST   -Y,R17
0002dc 930a      	ST   -Y,R16
0002dd e6e4      	LDI  R30,LOW(_put_buff_G100)
0002de e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002df 93fa      	ST   -Y,R31
0002e0 93ea      	ST   -Y,R30
0002e1 01de      	MOVW R26,R28
0002e2 961c      	ADIW R26,12
0002e3 deae      	RCALL __print_G100
0002e4 019f      	MOVW R18,R30
0002e5 85a8      	LDD  R26,Y+8
0002e6 85b9      	LDD  R27,Y+8+1
0002e7 e0e0      	LDI  R30,LOW(0)
0002e8 93ec      	ST   X,R30
0002e9 01f9      	MOVW R30,R18
                 _0x2080003:
0002ea d109      	RCALL __LOADLOCR6
0002eb 962c      	ADIW R28,12
0002ec 90ff      	POP  R15
0002ed 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002ee 931a      	ST   -Y,R17
0002ef 2f1a      	MOV  R17,R26
0002f0 b3e5      	IN   R30,0x15
0002f1 70ef      	ANDI R30,LOW(0xF)
0002f2 2fae      	MOV  R26,R30
0002f3 2fe1      	MOV  R30,R17
0002f4 7fe0      	ANDI R30,LOW(0xF0)
0002f5 2bea      	OR   R30,R26
0002f6 bbe5      	OUT  0x15,R30
                +
0002f7 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002f8 958a     +DEC R24
0002f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002fa 9aaa      	SBI  0x15,2
                +
0002fb e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002fc 958a     +DEC R24
0002fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002fe 98aa      	CBI  0x15,2
                +
0002ff e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000300 958a     +DEC R24
000301 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000302 c081      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000303 93aa      	ST   -Y,R26
000304 81a8      	LD   R26,Y
000305 dfe8      	RCALL __lcd_write_nibble_G101
000306 81e8          ld    r30,y
000307 95e2          swap  r30
000308 83e8          st    y,r30
000309 81a8      	LD   R26,Y
00030a dfe3      	RCALL __lcd_write_nibble_G101
                +
00030b e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00030c 958a     +DEC R24
00030d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00030e 9621      	ADIW R28,1
00030f 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000310 931a      	ST   -Y,R17
000311 930a      	ST   -Y,R16
000312 2f1a      	MOV  R17,R26
000313 810a      	LDD  R16,Y+2
000314 2fe1      	MOV  R30,R17
000315 e0f0      	LDI  R31,0
000316 59e1      	SUBI R30,LOW(-__base_y_G101)
000317 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000318 81e0      	LD   R30,Z
000319 0fe0      	ADD  R30,R16
00031a 2fae      	MOV  R26,R30
00031b dfe7      	RCALL __lcd_write_data
00031c 2eb0      	MOV  R11,R16
00031d 2ea1      	MOV  R10,R17
00031e 8119      	LDD  R17,Y+1
00031f 8108      	LDD  R16,Y+0
000320 9623      	ADIW R28,3
000321 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000322 e0a2      	LDI  R26,LOW(2)
000323 d0bf      	RCALL SUBOPT_0xA
000324 e0ac      	LDI  R26,LOW(12)
000325 dfdd      	RCALL __lcd_write_data
000326 e0a1      	LDI  R26,LOW(1)
000327 d0bb      	RCALL SUBOPT_0xA
000328 e0e0      	LDI  R30,LOW(0)
000329 2eae      	MOV  R10,R30
00032a 2ebe      	MOV  R11,R30
00032b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00032c 931a      	ST   -Y,R17
00032d 2f1a      	MOV  R17,R26
00032e 301a      	CPI  R17,10
00032f f011      	BREQ _0x2020005
000330 14bd      	CP   R11,R13
000331 f040      	BRLO _0x2020004
                 _0x2020005:
000332 e0e0      	LDI  R30,LOW(0)
000333 93ea      	ST   -Y,R30
000334 94a3      	INC  R10
000335 2daa      	MOV  R26,R10
000336 dfd9      	RCALL _lcd_gotoxy
000337 301a      	CPI  R17,10
000338 f409      	BRNE _0x2020007
000339 c04a      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00033a 94b3      	INC  R11
00033b 9aa8      	SBI  0x15,0
00033c 2fa1      	MOV  R26,R17
00033d dfc5      	RCALL __lcd_write_data
00033e 98a8      	CBI  0x15,0
00033f c044      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000340 d0ae      	RCALL __SAVELOCR4
000341 019d      	MOVW R18,R26
                 _0x2020008:
000342 01d9      	MOVW R26,R18
                +
000343 5f2f     +SUBI R18 , LOW ( - 1 )
000344 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000345 91ec      	LD   R30,X
000346 2f1e      	MOV  R17,R30
000347 30e0      	CPI  R30,0
000348 f019      	BREQ _0x202000A
000349 2fa1      	MOV  R26,R17
00034a dfe1      	RCALL _lcd_putchar
00034b cff6      	RJMP _0x2020008
                 _0x202000A:
00034c c00c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00034d d0a1      	RCALL __SAVELOCR4
00034e 019d      	MOVW R18,R26
                 _0x202000B:
00034f 01f9      	MOVW R30,R18
                +
000350 5f2f     +SUBI R18 , LOW ( - 1 )
000351 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000352 91e4      	LPM  R30,Z
000353 2f1e      	MOV  R17,R30
000354 30e0      	CPI  R30,0
000355 f019      	BREQ _0x202000D
000356 2fa1      	MOV  R26,R17
000357 dfd4      	RCALL _lcd_putchar
000358 cff6      	RJMP _0x202000B
                 _0x202000D:
                 _0x2080002:
000359 d09c      	RCALL __LOADLOCR4
00035a 9624      	ADIW R28,4
00035b 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00035c 931a      	ST   -Y,R17
00035d 2f1a      	MOV  R17,R26
00035e b3e4      	IN   R30,0x14
00035f 6fe0      	ORI  R30,LOW(0xF0)
000360 bbe4      	OUT  0x14,R30
000361 9aa2      	SBI  0x14,2
000362 9aa0      	SBI  0x14,0
000363 9aa1      	SBI  0x14,1
000364 98aa      	CBI  0x15,2
000365 98a8      	CBI  0x15,0
000366 98a9      	CBI  0x15,1
000367 2ed1      	MOV  R13,R17
000368 2fe1      	MOV  R30,R17
000369 58e0      	SUBI R30,-LOW(128)
                +
00036a 93e0 0271+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00036c 2fe1      	MOV  R30,R17
00036d 54e0      	SUBI R30,-LOW(192)
                +
00036e 93e0 0272+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000370 e1a4      	LDI  R26,LOW(20)
000371 e0b0      	LDI  R27,0
000372 d09a      	RCALL _delay_ms
000373 d073      	RCALL SUBOPT_0xB
000374 d072      	RCALL SUBOPT_0xB
000375 d071      	RCALL SUBOPT_0xB
000376 e2a0      	LDI  R26,LOW(32)
000377 df76      	RCALL __lcd_write_nibble_G101
                +
000378 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000379 958a     +DEC R24
00037a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00037b e2a8      	LDI  R26,LOW(40)
00037c df86      	RCALL __lcd_write_data
00037d e0a4      	LDI  R26,LOW(4)
00037e df84      	RCALL __lcd_write_data
00037f e8a5      	LDI  R26,LOW(133)
000380 df82      	RCALL __lcd_write_data
000381 e0a6      	LDI  R26,LOW(6)
000382 df80      	RCALL __lcd_write_data
000383 df9e      	RCALL _lcd_clear
                 _0x2080001:
000384 9119      	LD   R17,Y+
000385 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000386 93ba      	ST   -Y,R27
000387 93aa      	ST   -Y,R26
000388 91a9          ld   r26,y+
000389 91b9          ld   r27,y+
00038a 27ee          clr  r30
00038b 27ff          clr  r31
                 strlen0:
00038c 916d          ld   r22,x+
00038d 2366          tst  r22
00038e f011          breq strlen1
00038f 9631          adiw r30,1
000390 cffb          rjmp strlen0
                 strlen1:
000391 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000392 93ba      	ST   -Y,R27
000393 93aa      	ST   -Y,R26
000394 27aa          clr  r26
000395 27bb          clr  r27
000396 91e9          ld   r30,y+
000397 91f9          ld   r31,y+
                 strlenf0:
000398 9005      	lpm  r0,z+
000399 2000          tst  r0
00039a f011          breq strlenf1
00039b 9611          adiw r26,1
00039c cffb          rjmp strlenf0
                 strlenf1:
00039d 01fd          movw r30,r26
00039e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _s:
000260           	.BYTE 0xF
                 __base_y_G101:
00026f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x0:
00039f e6e0      	LDI  R30,LOW(_s)
0003a0 e0f2      	LDI  R31,HIGH(_s)
0003a1 93fa      	ST   -Y,R31
0003a2 93ea      	ST   -Y,R30
                +
0003a3 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0003a4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0003a5 93fa      	ST   -Y,R31
0003a6 93ea      	ST   -Y,R30
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
0003a8 e6e0      	LDI  R30,LOW(_s)
0003a9 e0f2      	LDI  R31,HIGH(_s)
0003aa 93fa      	ST   -Y,R31
0003ab 93ea      	ST   -Y,R30
                +
0003ac e6ec     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0003ad e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0003ae 93fa      	ST   -Y,R31
0003af 93ea      	ST   -Y,R30
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0003b1 df70      	RCALL _lcd_clear
0003b2 e0e0      	LDI  R30,LOW(0)
0003b3 93ea      	ST   -Y,R30
0003b4 e0a0      	LDI  R26,LOW(0)
0003b5 cf5a      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0003b6 df96      	RCALL _lcd_putsf
0003b7 e0e0      	LDI  R30,LOW(0)
0003b8 93ea      	ST   -Y,R30
0003b9 e0a1      	LDI  R26,LOW(1)
0003ba cf55      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0003bb 9614      	ADIW R26,4
                +
0003bc 91ed     +LD R30 , X +
0003bd 91fc     +LD R31 , X
0003be 9711     +SBIW R26 , 1
                 	__GETW1P
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0003c0 91ed      	LD   R30,X+
0003c1 91fd      	LD   R31,X+
0003c2 9631      	ADIW R30,1
0003c3 93fe      	ST   -X,R31
0003c4 93ee      	ST   -X,R30
0003c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
0003c6 932a      	ST   -Y,R18
0003c7 85ad      	LDD  R26,Y+13
0003c8 85be      	LDD  R27,Y+13+1
0003c9 85ef      	LDD  R30,Y+15
0003ca 89f8      	LDD  R31,Y+15+1
0003cb 9509      	ICALL
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x7:
0003cd 89e8      	LDD  R30,Y+16
0003ce 89f9      	LDD  R31,Y+16+1
0003cf 9734      	SBIW R30,4
0003d0 8be8      	STD  Y+16,R30
0003d1 8bf9      	STD  Y+16+1,R31
0003d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
0003d3 85ad      	LDD  R26,Y+13
0003d4 85be      	LDD  R27,Y+13+1
0003d5 85ef      	LDD  R30,Y+15
0003d6 89f8      	LDD  R31,Y+15+1
0003d7 9509      	ICALL
0003d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
0003d9 89a8      	LDD  R26,Y+16
0003da 89b9      	LDD  R27,Y+16+1
0003db 9614      	ADIW R26,4
0003dc 91ed      	LD   R30,X+
0003dd 91fd      	LD   R31,X+
0003de 83ee      	STD  Y+6,R30
0003df 83ff      	STD  Y+6+1,R31
0003e0 81ae      	LDD  R26,Y+6
0003e1 81bf      	LDD  R27,Y+6+1
0003e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003e3 df1f      	RCALL __lcd_write_data
0003e4 e0a3      	LDI  R26,LOW(3)
0003e5 e0b0      	LDI  R27,0
0003e6 c026      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
0003e7 e3a0      	LDI  R26,LOW(48)
0003e8 df05      	RCALL __lcd_write_nibble_G101
                +
0003e9 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0003ea 958a     +DEC R24
0003eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0003ec 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0003ed 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003ee 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003ef 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003f0 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003f1 931a      	ST   -Y,R17
0003f2 930a      	ST   -Y,R16
0003f3 9508      	RET
                 
                 __LOADLOCR6:
0003f4 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003f5 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003f6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003f7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003f8 8119      	LDD  R17,Y+1
0003f9 8108      	LD   R16,Y
0003fa 9508      	RET
                 
                 __ANEGW1:
0003fb 95f1      	NEG  R31
0003fc 95e1      	NEG  R30
0003fd 40f0      	SBCI R31,0
0003fe 9508      	RET
                 
                 __LSRW2:
0003ff 95f6      	LSR  R31
000400 95e7      	ROR  R30
000401 95f6      	LSR  R31
000402 95e7      	ROR  R30
000403 9508      	RET
                 
                 __GETW1PF:
000404 9005      	LPM  R0,Z+
000405 91f4      	LPM  R31,Z
000406 2de0      	MOV  R30,R0
000407 9508      	RET
                 
                 __PUTPARD1:
000408 937a      	ST   -Y,R23
000409 936a      	ST   -Y,R22
00040a 93fa      	ST   -Y,R31
00040b 93ea      	ST   -Y,R30
00040c 9508      	RET
                 
                 _delay_ms:
00040d 9610      	adiw r26,0
00040e f039      	breq __delay_ms1
                 __delay_ms0:
00040f 95a8      	wdr
                +
000410 ef8a     +LDI R24 , LOW ( 0xFA )
000411 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000412 9701     +SBIW R24 , 1
000413 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000414 9711      	sbiw r26,1
000415 f7c9      	brne __delay_ms0
                 __delay_ms1:
000416 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  17 r1 :   1 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   1 r7 :   0 
r8 :   1 r9 :   0 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   6 
r16:  40 r17:  45 r18:  41 r19:  10 r20:  12 r21:  22 r22:  18 r23:   9 
r24:  26 r25:   3 r26: 107 r27:  35 r28:  17 r29:   1 r30: 241 r31:  82 
x  :  31 y  : 147 z  :  18 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  23 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   3 cpi   :  35 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  23 ld    :  29 ldd   :  61 ldi   : 157 
lds   :   0 lpm   :  16 lsl   :   0 lsr   :   2 mov   :  37 movw  :  30 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  50 pop   :   1 push  :   1 rcall :  88 ret   :  31 
reti  :   0 rjmp  :  84 rol   :   0 ror   :   2 sbc   :   2 sbci  :   4 
sbi   :   7 sbic  :  12 sbis  :   1 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  63 std   :  30 sts   :   2 sub   :   1 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00082e   1998     96   2094   32768   6.4%
[.dseg] 0x000060 0x000273      0     19     19    2048   0.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
